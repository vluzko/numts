const tensor = require('../numts/tensor').tensor;
const numts = require('../numts/numts');
const linalg = require('../numts/linalg');

describe('Matrix norms.', function() {
  
  describe('l2.', () => {
    it('Simple.', () => {
      const a = numts.arange(25);
      const b = linalg.l2(a);
      expect(b).toBe(70);
    });
  });

  describe('l1', () => {

  });
});

describe('Decompositions.', () =>  {
  describe('LU decomposition.', () => {
    it('No pivoting.', () =>  {
      const a = numts.from_nested_array([
          [4, 2, -1, 3],
          [3, -4, 2, 5],
          [-2, 6, -5, -2],
          [5, 1, 6, -3]
      ]);
      const [l, u] = linalg.lu(a);
      const exp_l = numts.from_nested_array([
        [1, 0, 0, 0],
        [0.75, 1, 0, 0],
        [-0.5, -14 / 11, 1, 0],
        [1.25, 3/11, -13/4, 1]
      ]);
      const exp_u = numts.from_nested_array([
        [4, 2, -1, 3],
        [0, -11/2, 11/4, 11/4],
        [0, 0, -2, 3],
        [0, 0, 0, 9/4]
      ])
      expect(exp_l.is_close(l));
      expect(exp_u.is_close(u));
    });
  });

  describe('QR decomposition.', () =>  {
    describe('Givens QR.' , () =>  {
      it('Basic test.', () =>  {
        const a = numts.arange(15).reshape(5, 3);
        const [q, r] = linalg.qr(a);
        const prod = tensor.matmul_2d(q, r);
        
        expect(a.is_close(prod).all()).toBe(true);
      });
    });

    describe('Householder QR', () => {
      it('Basic test.', () =>  {
        const a = numts.from_nested_array([
          [1, 6,  11],
          [2, 7, 12],
          [3, 8, 13],
          [4, 9, 14],
          [5, 10, 15]
        ])
        const [m, ] = a.shape;
        const [q, r] = linalg.qr(a, {algorithm: 'householder'});
        const prod = tensor.matmul_2d(q, r);

        const inv_prod = tensor.matmul_2d(q, q.transpose());
        const expected = tensor.eye(m);
        expect(inv_prod.is_close(expected).all()).toBe(true);
        expect(a.is_close(prod).all()).toBe(true);
      });

      describe('From failures.', () =>  {
        // Failure doesn't repeat.
        it('1. Generated by fast-check.', () =>  {
          const a = numts.from_nested_array([
            [0, 0.03880476951599121],
            [0.9937839508056641, 0.5671613216400146]
          ]);
          const [q, r] = linalg.qr(a, {algorithm: 'householder'});
          
          const inv_prod = tensor.matmul_2d(q, q.transpose());
          expect(inv_prod.is_close(tensor.eye(2)).all()).toBe(true);
          const qr_prod = tensor.matmul_2d(q, r);
          expect(qr_prod.is_close(a).all()).toBe(true);
        });

        // Failure doesn't repeat.
        it('2. Generated by fast-check.', () =>  {
          const a = numts.from_nested_array([
            [0, 0.9712722897529602],
            [0.7647293210029602, 0.32188379764556885],
            [0.3959425091743469, 0.7986384630203247]
          ]);
          const [q, r] = linalg.qr(a, {algorithm: 'householder'});
          
          const inv_prod = tensor.matmul_2d(q, q.transpose());
          expect(inv_prod.is_close(tensor.eye(3)).all()).toBe(true);
          const qr_prod = tensor.matmul_2d(q, r);
          expect(qr_prod.is_close(a).all()).toBe(true);
        });
      });
    });
  });
})
